schema {
  query: Query
  mutation: Mutation
}

type Query {
  data: DataContainer
}

type DataContainer {
  items(first: Int): [Item!]!
  metadata: Metadata
  requiredMetadata: Metadata!
  metafield(namespace: String!, key: String!): Metafield
  searchResults: [SearchResult!]!
  itemMatrix: [[Item]]
  metadataCube: [[[Metadata]]]
  products: [Product!]!
  purchasable: Purchasable
  interfaceImplementers: [InterfaceImplementersUnion!]!
  nested: [NestedOuter!]!
}

union SearchResult = Item | Metadata

union Product = PhysicalProduct | DigitalProduct | GiftCard

interface Purchasable {
  price: Int!
  currency: String!
}

interface HasId {
  id: ID!
}

interface HasName {
  name: String!
}

interface HasDescription {
  description: String!
}

type InterfaceImplementer1 implements HasId & HasName & HasDescription {
  id: ID!
  name: String!
  description: String!
}

type InterfaceImplementer2 implements HasId & HasName {
  id: ID!
  name: String!
}

type InterfaceImplementer3 implements HasId {
  id: ID!
}

type NoInterfacesImplemented {
  value: String
}

union InterfaceImplementersUnion = InterfaceImplementer1 | InterfaceImplementer2 | InterfaceImplementer3 | NoInterfacesImplemented

union NestedOuter = NestedOuterA | NestedOuterB

type NestedOuterA {
  id: ID
  inner: [NestedInner!]!
}

type NestedOuterB {
  email: String
}

union NestedInner = NestedInnerA | NestedInnerB

type NestedInnerA {
  name: String!
}

type NestedInnerB {
  value: String!
}

type Item {
  id: ID
  count: Int!
  details(itemId: String): ItemDetails
}

type ItemDetails {
  id: ID!
  name: String!
  attributes: [ItemAttribute]
}

type ItemAttribute {
  key: String!
  value: String!
}

type Metadata {
  email: String
  phone: String
}

type Metafield {
  type: String!
  value: String!
}

type Mutation {
  """
  Handles the Function result for the data.processing.generate.run target.
  """
  processData(result: ProcessDataResult!): Boolean!
  
  """
  Processes fetch requests for the data.fetching.generate.run target.
  """
  fetchData(input: FetchDataResult!): Boolean!
}

input ProcessDataResult {
  title: String!
  count: Int!
  items: [ProcessingItem!]!
}

input ProcessingItem {
  name: String!
  value: Int!
}

input FetchDataResult {
  request: HttpRequest!
}

input HttpRequest {
  url: String!
  method: String!
  headers: String
  body: String
}

type PhysicalProduct implements Purchasable {
  price: Int!
  currency: String!
  weight: Int!
  sku: String!
}

type DigitalProduct implements Purchasable {
  price: Int!
  currency: String!
  downloadUrl: String!
  fileSize: Int!
}

type GiftCard {
  code: String!
  balance: Int!
}