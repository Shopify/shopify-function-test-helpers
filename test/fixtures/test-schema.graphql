schema {
  query: Query
  mutation: Mutation
}

type Query {
  data: DataContainer
}

type DataContainer {
  items(first: Int): [Item!]!
  metadata: Metadata
  requiredMetadata: Metadata!
  metafield(namespace: String!, key: String!): Metafield
  searchResults: [SearchResult!]!
  itemMatrix: [[Item]]
  metadataCube: [[[Metadata]]]
}

union SearchResult = Item | Metadata

type Item {
  id: ID
  count: Int!
  details(itemId: String): ItemDetails
}

type ItemDetails {
  id: ID!
  name: String!
  attributes: [ItemAttribute]
}

type ItemAttribute {
  key: String!
  value: String!
}

type Metadata {
  email: String
  phone: String
}

type Metafield {
  type: String!
  value: String!
}

type Mutation {
  """
  Handles the Function result for the data.processing.generate.run target.
  """
  processData(result: ProcessDataResult!): Boolean!
  
  """
  Processes fetch requests for the data.fetching.generate.run target.
  """
  fetchData(input: FetchDataResult!): Boolean!
}

input ProcessDataResult {
  title: String!
  count: Int!
  items: [ProcessingItem!]!
}

input ProcessingItem {
  name: String!
  value: Int!
}

input FetchDataResult {
  request: HttpRequest!
}

input HttpRequest {
  url: String!
  method: String!
  headers: String
  body: String
}